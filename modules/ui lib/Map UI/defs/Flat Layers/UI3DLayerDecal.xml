<?xml version="1.0" encoding="UTF-8"?>
<locust xmlns="http://www.muzzylane.com/ml/schema/2009/04/locust">

	<!-- Decal -->
	<objectDef type="UI3DLayerDecal" superType="mlui.UI3DLayer">
		<propertyDef name="objGameRoot" type="Object"/>
		<propertyDef name="objMapData" type="MapData"/>    
        <propertyDef name="bShadows" type="bool" default="false"/>
    
		<object type="ml3dworld.TransformTranslate" name="objTransform">
			<property name="vecTranslation">
				Vec3D(0, 0, 0.27)
			</property>
		</object>                        
        
        <property name="tmplAvailableEffects" value="EmissionWithShadowEffect"/>        
    
		<object type="mlui.UIDataEffect" name="objEffect" existsWhile="self.bShadows">                    
            <property name="tmplEffect" value="EmissionWithShadowEffect"/>
		</object>
    
        <!-- Internal -->

        <!--
            Filter down all of the unit group stacks to only those that have decals.
            The only group stacks with decals are those with an "Army" head unit group,
            with a display unit that is infantry, mobile infantry or artillery, but
            the artillery only has one if the unit group doesn't have a unit order.
        -->
		
        <propertyDef name="objDecalStacks" type="UnitGroupStack" variable="true">
            switch{
				case self.objMapData.objCameraTransform.fDistance LTE self.objMapData.fDropUnitsDistance:
					filter(
						?{stack:
							stack.objHeadUnitGroup.tmplUnitBranch == self.objMapData.objUnitBranchTemplateArmy AND
							?{animCategory:
								animCategory == gs_tbg.AnimationCategory.Infantry OR
								animCategory == gs_tbg.AnimationCategory.MobileInfantry OR
								animCategory == gs_tbg.AnimationCategory.Artillery
							}(stack.objDisplayUnit.objUnitTemplate.eAnimationCategory)
						},
						self.objMapData.objStacks.objGroupStacks
					)
				default:
					self.objMapData.objStacks.objGroupStacks
			}
        </propertyDef>

        <!-- Build a 3D UI element for each decal stack -->
		<object type="UI3DUnitGroupDecal" name="objUnitGroupDecal" tiedTo="self.objDecalStacks">
			<property name="objGameRoot" from="def.objGameRoot"/>
			<property name="objMapData" from="def.objMapData"/>
			<property name="objUnitGroup" from="tiedTo.objHeadUnitGroup"/>
			<property name="vecUnitGroupPosition" from="tiedTo.vecPosition"/>
		</object>
	</objectDef>

    <objectDef type="UI3DUnitGroupDecal" superType="UI3DMapModelGO">
        <!-- Inputs -->
    	<propertyDef name="objGameRoot" type="Object"/>
		<propertyDef name="objMapData" type="MapData"/>
        <propertyDef name="objUnitGroup" type="gs_tbg.UnitGroup"/>
        <propertyDef name="vecUnitGroupPosition" type="Vec3D"/>

        <!-- Internal -->
        <propertyDef name="objMapModel" type="MapModelTemplate">
            self.objMapData.objUnitModelTable.tmplDecalMapModel.resolve()
        </propertyDef>

		<property name="bVisible">
			if(self.objUnitGroup.tmplUnitBranch == self.objMapData.objUnitBranchTemplateSubmarine AND
				self.objUnitGroup.refController.resolve(self.objGameRoot) != self.objMapData.objNation,
				gs_tbg.getNationDetectionForRegion(self.objGameRoot, self.objMapData.objNation, self.objUnitGroup.getRegion(self.objGameRoot)),
				true)
		</property>
		
        <!-- UI3DModelWithAnimationGO properties -->
        <property name="objGO" from="self.objUnitGroup"/>
        <property name="tmplModel" from="self.objMapModel.tmplModel"/>
		<propertyDef name="strToolTip" from="UI2DToolTipUnitGroup"/>

		<object type="mlui.UIDataMaterial" name="objMaterial">
			<property name="strOverride" value="lambert46-fx"/>
			<object type="mlmedia.Material" name="objMaterial">
				<property name="nEmissionTexCoordSet" value="0"/>
				<object type="mlmedia.SamplerFromTexture" name="objEmissionSampler">
					<property name="tmplTexture">
                        def.objMapData.objFlagModelTextureTable.getTextureForNationDecal(def.objGameRoot, def.objUnitGroup.refController.resolve(def.objGameRoot))
                    </property>
					<property name="eMinFilter" value="FILTER_LINEAR"/>
					<property name="eMagFilter" value="FILTER_LINEAR"/>
					<property name="eMipFilter" value="FILTER_NONE"/>
				</object>
			</object>
		</object>

        <!-- UI3DMapModel properties -->
		<property name="objMap" from="self.objMapData.objMap" />
		<property name="vecPointOfInterest" from="self.objMapData.objCameraTransform.vecLookAt" />
		<property name="vecPosition">
				Vec3D(self.vecUnitGroupPosition.x, self.vecUnitGroupPosition.y, 0.0)
		</property>
		<object type="ml3dworld.TransformList" name="objLocalTransforms">
			<object type="ml3dworld.TransformList" name="objTransforms">
				<property name="objTransforms" from="def.objMapModel.objTransform"/>
			</object>
		</object>

	</objectDef>

</locust>
